import logging
import sys
from os import getenv
from config import TOKEN, ADMIN_CHAT_ID, PGPASS, DB_USER, DB_NAME, DB_HOST, DB_PORT
# from dotenv import load_dotenv
from keyboard.builder import reply, inline_btn, inline_kb
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from datetime import datetime, timedelta, date
from asyncpg import Connection
import asyncio
import asyncpg
import sqlite3
from typing import Optional, Tuple
import re


class Help(StatesGroup):
    reg = State()
    form = State()


dp = Dispatcher()
db_pool: asyncpg.Pool = None
pending_users = {}


import asyncpg

db_pool = None  # –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è

async def init_db():
    global db_pool
    db_pool = await asyncpg.create_pool(
        user=DB_USER,
        password=PGPASS,
        database=DB_NAME,         # <- –∏—Å–ø–æ–ª—å–∑—É–π –∏–º—è —Å–≤–æ–µ–π –ë–î
        host=DB_HOST,
        port=DB_PORT
    )

    async with db_pool.acquire() as conn:
        await conn.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id SERIAL PRIMARY KEY,
            name TEXT,
            age INTEGER,
            fitness_level INTEGER,
            training_time INTEGER,
            reminder_time TEXT,
            chat_id BIGINT UNIQUE,
            exercise_types TEXT,
            created_at DATE DEFAULT CURRENT_DATE
        );
        """)

        await conn.execute("""
        CREATE TABLE IF NOT EXISTS exercises (
            id SERIAL PRIMARY KEY,
            name TEXT NOT NULL,
            level INTEGER NOT NULL,
            description TEXT NOT NULL,
            repetitions TEXT NOT NULL
        );
        """)

        await conn.execute("""
        CREATE TABLE IF NOT EXISTS exercise_types (
            id SERIAL PRIMARY KEY,
            name TEXT NOT NULL UNIQUE
        );
        """)

        await conn.execute("""
        CREATE TABLE IF NOT EXISTS exercise_type_links (
            exercise_id INTEGER REFERENCES exercises(id),
            type_id INTEGER REFERENCES exercise_types(id),
            PRIMARY KEY (exercise_id, type_id)
        );
        """)

        await conn.execute("""
        CREATE TABLE IF NOT EXISTS workout_log (
            id SERIAL PRIMARY KEY,
            user_id INTEGER REFERENCES users(id),
            date DATE,
            completed INTEGER DEFAULT 1
        );
        """)

        await conn.execute("""
        CREATE TABLE IF NOT EXISTS feedback (
            id SERIAL PRIMARY KEY,
            user_id INTEGER REFERENCES users(id),
            date DATE,
            rating INTEGER,
            comment TEXT
        );
        """)

        await conn.execute("""
        CREATE TABLE IF NOT EXISTS challenges (
            user_id INTEGER PRIMARY KEY REFERENCES users(id),
            type TEXT,
            start_date DATE,
            progress INTEGER DEFAULT 0,
            target INTEGER,
            active INTEGER DEFAULT 1
        );
        """)

        await conn.execute("""
        CREATE TABLE IF NOT EXISTS questions (
            id SERIAL PRIMARY KEY,
            user_id INTEGER REFERENCES users(id),
            chat_id BIGINT,
            text TEXT,
            date DATE DEFAULT CURRENT_DATE,
            status TEXT DEFAULT 'open'
        );
        """)

    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã.")



# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
class UserState(StatesGroup):
    name = State()
    age = State()
    fitness_level = State()
    training_time = State()
    reminder_time = State()
    exercise_types = State()
    waiting_feedback_rating = State()
    waiting_feedback_comment = State()


class Help(StatesGroup):
    reg = State()
    form = State()
    answering = State()  # üîπ –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ


async def get_streak_visual(user_id: int, days: int = 28) -> str:
    async with db_pool.acquire() as conn:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await conn.fetchval("SELECT created_at FROM users WHERE id = $1", user_id)
        if not result:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö üìâ"

        created_date = result
        today = date.today()
        days_since_start = (today - created_date).days + 1
        visual_length = min(days_since_start, days)  # –Ω–µ –±–æ–ª—å—à–µ 28

        visual = []

        for i in range(visual_length):
            check_date = created_date + timedelta(days=i)
            completed = await conn.fetchval(
                "SELECT completed FROM workout_log WHERE user_id = $1 AND date = $2",
                user_id,
                check_date
            )
            visual.append("‚úÖ" if completed == 1 else "‚ùå")

        # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ 7 —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ
        lines = [ ''.join(visual[i:i+7]) for i in range(0, len(visual), 7) ]
        return "\n".join(lines)


# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∏–º–µ–Ω–∏
@dp.message(Command("start"))
async def start(message: Message, state: FSMContext):
    chat_id = message.chat.id

    async with db_pool.acquire() as conn:
        user = await conn.fetchrow("SELECT id, name FROM users WHERE chat_id = $1", chat_id)

    if user:
        user_id = user["id"]
        name = user["name"]

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continue"),
                InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç", callback_data="create_new")
            ]
        ])
        await message.answer(
            f"–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ {name}. –ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?",
            reply_markup=keyboard
        )
    else:
        # –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å—Ä–∞–∑—É
        await state.update_data(user_id=message.from_user.id)
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
        await state.set_state(UserState.name)



@dp.callback_query(F.data.in_({"continue", "create_new"}))
async def handle_start_choice(callback: CallbackQuery, state: FSMContext):
    chat_id = callback.message.chat.id

    if callback.data == "continue":
        await callback.message.answer("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–µ–∫—É—â–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º üí™")
        await state.clear()

    elif callback.data == "create_new":
        async with db_pool.acquire() as conn:
            user = await conn.fetchrow("SELECT id, name FROM users WHERE chat_id = $1", chat_id)

            if user:
                user_id = user["id"]
                old_name = user["name"]

                # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–π –∞–∫–∫–∞—É–Ω—Ç
                await conn.execute(
                    "UPDATE users SET chat_id = NULL, name = $1 WHERE id = $2",
                    f"_Deactivated_{old_name}",
                    user_id
                )

        await callback.message.answer("–°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
        await state.update_data(user_id=callback.from_user.id)
        await state.set_state(UserState.name)

    await callback.answer()  # –∑–∞–∫—Ä—ã–≤–∞–µ—Ç "—á–∞—Å–∏–∫–∏"



@dp.message(UserState.name)
async def get_name(message: Message, state: FSMContext):
    user_id = message.from_user.id  # –ø–æ–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ, –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç—Å—è –≤ get_reminder_time
    await state.update_data(name=message.text, user_id=user_id)
    await message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    await state.set_state(UserState.age)


# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞
@dp.message(UserState.age)
async def get_age(message: Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º.")
        return

    await state.update_data(age=int(message.text))

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="1"), KeyboardButton(text="2")],
            [KeyboardButton(text="3"), KeyboardButton(text="4")],
            [KeyboardButton(text="5")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await message.answer(
        "–ö–∞–∫–æ–π —É —Ç–µ–±—è —É—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏?\n"
        "1 - –ù–∞—á–∞–ª—å–Ω—ã–π (–º–∞–ª–æ–ø–æ–¥–≤–∏–∂–Ω—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏)\n"
        "2 - –ù–∏–∂–µ —Å—Ä–µ–¥–Ω–µ–≥–æ (–Ω–µ–±–æ–ª—å—à–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å)\n"
        "3 - –°—Ä–µ–¥–Ω–∏–π (—Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏)\n"
        "4 - –í—ã—à–µ —Å—Ä–µ–¥–Ω–µ–≥–æ (–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏)\n"
        "5 - –í—ã—Å–æ–∫–∏–π (–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å)",
        reply_markup=keyboard
    )
    await state.set_state(UserState.fitness_level)


# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ —É—Ä–æ–≤–Ω—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏
@dp.message(UserState.fitness_level)
async def get_fitness_level(message: Message, state: FSMContext):
    if message.text not in ["1", "2", "3", "4", "5"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É.")
        return

    await state.update_data(fitness_level=int(message.text))

    # –ü—Ä–µ–¥–ª–æ–∂–∏–º –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø—ã —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ü—Ä–µ—Å—Å"), KeyboardButton(text="–†–∞—Å—Ç—è–∂–∫–∞")],
            [KeyboardButton(text="–†—É–∫–∏"), KeyboardButton(text="–°–ø–∏–Ω–∞")],
            [KeyboardButton(text="–ù–æ–≥–∏"), KeyboardButton(text="–ì–ª–∞–∑–∞")],
            [KeyboardButton(text="–ì–æ—Ç–æ–≤–æ")]
        ],
        resize_keyboard=True
    )

    await message.answer(
        "–í—ã–±–µ—Ä–∏ —Ç–∏–ø—ã —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ). –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å ‚Äî –Ω–∞–∂–º–∏ '–ì–æ—Ç–æ–≤–æ'.",
        reply_markup=keyboard
    )
    await state.update_data(exercise_types=[])
    await state.set_state(UserState.exercise_types)


@dp.message(UserState.exercise_types)
async def choose_types(message: Message, state: FSMContext):
    if message.text.lower() == "–≥–æ—Ç–æ–≤–æ":
        data = await state.get_data()
        selected = data.get("exercise_types", [])
        if not selected:
            await message.answer("–¢—ã –Ω–µ –≤—ã–±—Ä–∞–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω.")
            return

        #await message.answer("–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç —Ç—ã –≥–æ—Ç–æ–≤ —É–¥–µ–ª—è—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ?", reply_markup=types.ReplyKeyboardRemove())
        #await state.set_state(UserState.training_time)
        await message.answer(
            "–í–æ —Å–∫–æ–ª—å–∫–æ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Ç–µ–±–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ? (–í–≤–µ–¥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä, 08:00)",
            reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(UserState.reminder_time)
    else:
        data = await state.get_data()
        selected = data.get("exercise_types", [])
        if message.text not in selected:
            selected.append(message.text)
        await state.update_data(exercise_types=selected)

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
# @dp.message(UserState.training_time)
# async def get_training_time(message: Message, state: FSMContext):
#     if not message.text.isdigit():
#         await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö.")
#         return
#     await state.update_data(training_time=int(message.text))
#     await message.answer("–í–æ —Å–∫–æ–ª—å–∫–æ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Ç–µ–±–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:00)")
#     await state.set_state(UserState.reminder_time)


# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
@dp.message(UserState.reminder_time)
async def get_reminder_time(message: Message, state: FSMContext):
    user_data = await state.get_data()
    user_types = ",".join(user_data.get("exercise_types", []))
    created_at = datetime.date
    text = message.text.strip()

    # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å: 7:0 ‚Üí 07:00
    match = re.match(r'^(\d{1,2}):(\d{1,2})$', text)
    if not match:
        await message.answer("–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä 08:30")
        return

    hour, minute = int(match.group(1)), int(match.group(2))
    if hour > 23 or minute > 59:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç 00:00 –¥–æ 23:59")
        return

    normalized_time = f"{hour:02d}:{minute:02d}"
    # –í—Å—Ç–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ id
    async with db_pool.acquire() as conn:
        row = await conn.fetchrow(
            """
            INSERT INTO users (name, age, fitness_level, training_time, reminder_time, chat_id, exercise_types)
            VALUES ($1, $2, $3, $4, $5, $6, $7)
            RETURNING id
            """,
            user_data.get('name', ''),
            user_data.get('age', 0),
            user_data.get('fitness_level', 0),
            5,
            normalized_time,
            message.chat.id,
            user_types,
            #created_at
        )
        user_id = row["id"]

    await state.update_data(user_id=user_id)

    response = (
        f"–°–ø–∞—Å–∏–±–æ! –í–æ—Ç —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ:\n"
        f"–ò–º—è: {user_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {user_data.get('age', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"–£—Ä–æ–≤–µ–Ω—å —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏: {user_data.get('fitness_level', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        #f"–í—Ä–µ–º—è –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É: {user_data.get('training_time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')} –º–∏–Ω—É—Ç\n"
        f"–í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {message.text}"
    )

    await state.clear()
    await message.answer(response, reply_markup=types.ReplyKeyboardRemove())


# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏.
# async def get_exercise_for_user(level: int, types: list[str]) -> Optional[Tuple[str, str, str]]:
#     if not types:
#         return None
#
#     placeholders = ','.join(f'${i + 2}' for i in range(len(types)))  # $2, $3, ...
#     query = f"""
#         SELECT e.name, e.description, e.repetitions
#         FROM exercises e
#         JOIN exercise_type_links l ON e.id = l.exercise_id
#         JOIN exercise_types t ON l.type_id = t.id
#         WHERE e.level <= $1 AND t.name IN ({placeholders})
#         ORDER BY RANDOM()
#         LIMIT 1
#     """
#
#     async with db_pool.acquire() as conn:
#         row = await conn.fetchrow(query, level, *types)
#         if row:
#             return row["name"], row["description"], row["repetitions"]
#         return None
async def get_exercise_for_user(level: int, types: list[str]) -> Optional[Tuple[str, str, str]]:
    if not types:
        print("‚ö†Ô∏è –ù–µ—Ç —Ç–∏–ø–æ–≤ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return None

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏ –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏
    placeholders = ','.join(f'${i + 2}' for i in range(len(types)))  # $2, $3, ...
    query = f"""
        SELECT e.name, e.description, e.repetitions
        FROM exercises e
        JOIN exercise_type_links l ON e.id = l.exercise_id
        JOIN exercise_types t ON l.type_id = t.id
        WHERE e.level <= $1 AND t.name IN ({placeholders})
        ORDER BY RANDOM()
        LIMIT 1
    """

    try:
        async with db_pool.acquire() as conn:
            print(f"–ó–∞–ø—Ä–æ—Å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: level={level}, types={types}")
            row = await conn.fetchrow(query, level, *types)
            if row:
                print(f"üéØ –ù–∞–π–¥–µ–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: {row['name']}")
                return row["name"], row["description"], row["repetitions"]
            else:
                print("‚ùå –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π")
                return None
    except Exception as e:
        print(f"üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: {e}")
        return None


# –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
async def send_training_reminders(bot: Bot):
    while True:
        now = datetime.now().strftime("%H:%M")

        async with db_pool.acquire() as conn:
            users = await conn.fetch("""
                SELECT id, name, reminder_time, fitness_level, chat_id, exercise_types
                FROM users
            """)

        for user in users:
            user_id = user["id"]
            name = user["name"]
            reminder_time = user["reminder_time"]
            fitness_level = user["fitness_level"]
            # training_time = user["training_time"]
            chat_id = user["chat_id"]
            ex_types_str = user["exercise_types"]
            if chat_id:
                print(f"{chat_id} time is {now}; send time = {reminder_time}; should send = {reminder_time == now}")
            if reminder_time != now:
                continue
            types_list = ex_types_str.split(',') if ex_types_str else []
            exercise = await get_exercise_for_user(fitness_level, types_list)
            print(exercise)
            if exercise:
                ex_name, description, reps = exercise
                msg = (
                    f"–ü—Ä–∏–≤–µ—Ç, {name}! üëã\n"
                    f"–ü–æ—Ä–∞ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É üí™\n\n"
                    f"üèãÔ∏è {ex_name}\n"
                    f"üìã {description}\n"
                    f"üîÅ {reps}\n\n"
                    f"–ö–∞–∫ —Ç–æ–ª—å–∫–æ –∑–∞–∫–æ–Ω—á–∏—à—å ‚Äî –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É."
                )

                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(text="–í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"done_{user_id}"),
                        InlineKeyboardButton(text="–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"skip_{user_id}")
                    ]
                ])

                try:
                    await bot.send_message(chat_id=chat_id, text=msg, reply_markup=keyboard)

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏
                    pending_users[user_id] = {
                        "chat_id": chat_id,
                        "sent_at": datetime.now(),
                        "answered": False
                    }

                except Exception as e:
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {chat_id}: {e}")

        # Follow-up —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç
        now_dt = datetime.now()
        for user_id, data in list(pending_users.items()):
            if not data["answered"] and now_dt - data["sent_at"] >= timedelta(minutes=15):
                try:
                    await bot.send_message(chat_id=data["chat_id"], text="–¢—ã —É—Å–ø–µ–ª —Å–¥–µ–ª–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É? –ù–∞–ø–∏—à–∏ ¬´–í—ã–ø–æ–ª–Ω–µ–Ω–æ¬ª üí™")
                except Exception as e:
                    logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ follow-up –¥–ª—è {data['chat_id']}: {e}")
                del pending_users[user_id]

        await asyncio.sleep(60) # –¶–∏–∫–ª —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É


@dp.callback_query(F.data.startswith("done_"))
async def handle_done_callback(callback: CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split("_")[1])
    today = datetime.now().date()

    async with db_pool.acquire() as conn:
        # –£–¥–∞–ª—è–µ–º –∏–∑ pending, –µ—Å–ª–∏ –±—ã–ª
        if user_id in pending_users:
            pending_users[user_id]["answered"] = True

        count = await conn.fetchval(
            "SELECT COUNT(*) FROM workout_log WHERE user_id = $1 AND date = $2",
            user_id, today
        )

        if count == 0:
            await conn.execute(
                "INSERT INTO workout_log (user_id, date, completed) VALUES ($1, $2, 1)",
                user_id, today
            )

        streak = await calculate_streak(user_id)
        visual = await get_streak_visual(user_id)

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    TARGET_STREAK = 7
    response = f"–û—Ç–ª–∏—á–Ω–æ! –¢—ã –∫—Ä–∞—Å–∞–≤—á–∏–∫ üí™ –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞—Å—á–∏—Ç–∞–Ω!\n–¢–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫: {streak} üî•"
    if streak == TARGET_STREAK:
        response += f"\n\nüéâ –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú! –¢—ã –≤—ã–ø–æ–ª–Ω–∏–ª {TARGET_STREAK} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ–¥—Ä—è–¥! üöÄ"
    elif streak > TARGET_STREAK:
        response += f"\nüí™ –¢—ã —É–∂–µ –ø—Ä–µ–≤–∑–æ—à—ë–ª streak –∏–∑ {TARGET_STREAK} –¥–Ω–µ–π. –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"

    await callback.message.answer(response)
    await callback.message.answer(f"–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏:\n{visual}")
    await callback.message.answer(
        "–ö–∞–∫ –±—ã —Ç—ã –æ—Ü–µ–Ω–∏–ª —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –ø–æ 5-–±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ?",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=str(i)) for i in range(1, 6)]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
    )

    await state.set_state(UserState.waiting_feedback_rating)
    await callback.answer()  # –£–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏"


@dp.callback_query(F.data.startswith("skip_"))
async def handle_not_done_callback(callback: CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split("_")[1])
    today = datetime.now().date()

    async with db_pool.acquire() as conn:
        # –£–¥–∞–ª—è–µ–º –∏–∑ pending, –µ—Å–ª–∏ –±—ã–ª
        if user_id in pending_users:
            pending_users[user_id]["answered"] = True

        count = await conn.fetchval(
            "SELECT COUNT(*) FROM workout_log WHERE user_id = $1 AND date = $2",
            user_id, today
        )

        if count == 0:
            await conn.execute(
                "INSERT INTO workout_log (user_id, date, completed) VALUES ($1, $2, 0)",
                user_id, today
            )

        visual = await get_streak_visual(user_id)

    await callback.message.answer("–ñ–∞–ª—å, —á—Ç–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–µ–≥–æ–¥–Ω—è üòî")
    await callback.message.answer(f"–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏:\n{visual}")
    await state.clear()
    await callback.answer()  # –£–±–∏—Ä–∞–µ—Ç "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ


@dp.message(F.text.lower() == "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
async def handle_done(message: Message, state: FSMContext):
    today = datetime.now().date()
    chat_id = message.chat.id

    # –ü–æ–ª—É—á–∞–µ–º user_id –ø–æ chat_id
    async with db_pool.acquire() as conn:
        user_id = await conn.fetchval("SELECT id FROM users WHERE chat_id = $1", chat_id)
        if not user_id:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –£–¥–∞–ª—è–µ–º –∏–∑ pending, –µ—Å–ª–∏ –±—ã–ª
        if user_id in pending_users:
            pending_users[user_id]["answered"] = True

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å–∏ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        count = await conn.fetchval(
            "SELECT COUNT(*) FROM workout_log WHERE user_id = $1 AND date = $2",
            user_id, today
        )
        if count == 0:
            await conn.execute(
                "INSERT INTO workout_log (user_id, date, completed) VALUES ($1, $2, 1)",
                user_id, today
            )

        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç—Ä–∏–∫
        streak = await calculate_streak(user_id)
        visual = await get_streak_visual(user_id)

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    TARGET_STREAK = 7
    response = f"–û—Ç–ª–∏—á–Ω–æ! –¢—ã –∫—Ä–∞—Å–∞–≤—á–∏–∫ üí™ –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞—Å—á–∏—Ç–∞–Ω!\n–¢–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–∫: {streak} üî•"
    if streak == TARGET_STREAK:
        response += f"\n\nüéâ –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú! –¢—ã –≤—ã–ø–æ–ª–Ω–∏–ª {TARGET_STREAK} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ–¥—Ä—è–¥! üöÄ"
    elif streak > TARGET_STREAK:
        response += f"\nüí™ –¢—ã —É–∂–µ –ø—Ä–µ–≤–∑–æ—à—ë–ª streak –∏–∑ {TARGET_STREAK} –¥–Ω–µ–π. –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"

    await message.answer(response)
    await message.answer(f"–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏:\n{visual}")

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ—Ü–µ–Ω–∫–µ
    await message.answer(
        "–ö–∞–∫ –±—ã —Ç—ã –æ—Ü–µ–Ω–∏–ª —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –ø–æ 5-–±–∞–ª–ª—å–Ω–æ–π —à–∫–∞–ª–µ?",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text=str(i)) for i in range(1, 6)]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
    )
    await state.set_state(UserState.waiting_feedback_rating)



@dp.message(F.text.lower() == "–Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
async def handle_not_done_text(message: Message, state: FSMContext):
    today = datetime.now().date()
    chat_id = message.chat.id

    async with db_pool.acquire() as conn:
        user_id = await conn.fetchval("SELECT id FROM users WHERE chat_id = $1", chat_id)
        if not user_id:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –£–¥–∞–ª—è–µ–º –∏–∑ pending
        if user_id in pending_users:
            pending_users[user_id]["answered"] = True

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–æ –ª–∏ —É–∂–µ
        count = await conn.fetchval(
            "SELECT COUNT(*) FROM workout_log WHERE user_id = $1 AND date = $2",
            user_id, today
        )

        if count == 0:
            await conn.execute(
                "INSERT INTO workout_log (user_id, date, completed) VALUES ($1, $2, 0)",
                user_id, today
            )

        visual = await get_streak_visual(user_id)

    await message.answer("–ñ–∞–ª—å, —á—Ç–æ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–µ–≥–æ–¥–Ω—è üòî")
    await message.answer(f"–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–Ω–∏:\n{visual}")
    await state.clear()




@dp.message(UserState.waiting_feedback_rating)
async def handle_feedback_rating(message: Message, state: FSMContext):
    if message.text not in ["1", "2", "3", "4", "5"]:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5.")
        return

    await state.update_data(rating=int(message.text))
    await message.answer("–°–ø–∞—Å–∏–±–æ! –•–æ—á–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π? –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –µ–≥–æ, –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–Ω–µ—Ç'.")
    await state.set_state(UserState.waiting_feedback_comment)


@dp.message(UserState.waiting_feedback_comment)
async def handle_feedback_comment(message: Message, state: FSMContext):
    data = await state.get_data()
    chat_id = message.chat.id

    async with db_pool.acquire() as conn:
        user_id = await conn.fetchval("SELECT id FROM users WHERE chat_id = $1", chat_id)
        if not user_id:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        rating = data.get("rating")
        comment = message.text.strip()
        if comment.lower() == "–Ω–µ—Ç":
            comment = None

        today = datetime.date

        await conn.execute(
            "INSERT INTO feedback (user_id, date, rating, comment) VALUES ($1, $2, $3, $4)",
            user_id, today, rating, comment
        )

    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!", reply_markup=types.ReplyKeyboardRemove())
    await state.clear()



@dp.message(Command("ask"))
async def handle_ask(message: Message):
    question = message.text.replace("/ask", "").strip()
    if not question:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä:\n/ask –ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥—ã—à–∞—Ç—å?")
        return

    chat_id = message.chat.id
    today = datetime.date

    async with db_pool.acquire() as conn:
        user_row = await conn.fetchrow("SELECT id FROM users WHERE chat_id = $1", chat_id)
        if not user_row:
            await message.answer("–¢—ã –¥–æ–ª–∂–µ–Ω —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.")
            return

        user_id = user_row["id"]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –∏ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ id
        row = await conn.fetchrow(
            """
            INSERT INTO questions (user_id, chat_id, text, status)
            VALUES ($1, $2, $3, $4)
            RETURNING id
            """,
            user_id, chat_id, question, "open"
        )
        question_id = user_id

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    msg = (
        f"üì© *–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç* [{message.from_user.full_name}](tg://user?id={chat_id}):\n\n"
        f"{question}"
    )
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úâ –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"answer_{question_id}")]
    ])

    await message.bot.send_message(ADMIN_CHAT_ID, msg, reply_markup=keyboard, parse_mode="Markdown")
    await message.answer("–í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–Ω —Å–≤—è–∂–µ—Ç—Å—è —Å —Ç–æ–±–æ–π –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.")


async def calculate_streak(user_id: int) -> int:
    async with db_pool.acquire() as conn:
        rows = await conn.fetch(
            """
            SELECT date FROM workout_log
            WHERE user_id = $1 AND completed = 1
            ORDER BY date DESC
            """,
            user_id
        )
    if not rows:
        return 0

    streak = 0
    today = date.today()

    for i, (date_str,) in enumerate(rows):
        if isinstance(date_str, str):
            log_date = datetime.strptime(date_str, "%Y-%m-%d").date()
        else:
            log_date = date_str
        expected_date = today - timedelta(days=streak)
        if log_date == expected_date:
            streak += 1
        else:
            break

    return streak


@dp.message(Command("help"))
async def show_help(message: Message):
    await message.answer(
        "–í–æ—Ç, —á–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å:\n\n"
        "/start ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n"
        "/ask [—Ç–≤–æ–π –≤–æ–ø—Ä–æ—Å] ‚Äî –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É\n"
        "¬´–í—ã–ø–æ–ª–Ω–µ–Ω–æ¬ª ‚Äî –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n"
    )


@dp.callback_query(F.data.startswith("answer_"))
async def admin_start_answer(callback: CallbackQuery, state: FSMContext):
    question_id = int(callback.data.replace("answer_", ""))
    async with db_pool.acquire() as conn:
        question = await conn.fetch(
            """
            SELECT text FROM questions
            WHERE user_id = $1
            """,
            question_id
        )

    if not question:
        await callback.message.answer("–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")
        return

    await state.update_data(question_id=question_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await state.set_state(Help.answering)
    await callback.answer()


@dp.message(Help.answering)
async def admin_send_answer(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_CHAT_ID:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.")
        await state.clear()
        return

    data = await state.get_data()
    question_id = data.get("question_id")
    answer_text = message.text

    # –ü–æ–ª—É—á–∞–µ–º chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with db_pool.acquire() as conn:
        result = await conn.fetchrow(
            """
            SELECT chat_id FROM questions
            WHERE id = $1
            """,
            question_id
        )

    if not result:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    user_chat_id = result['chat_id']
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        await message.bot.send_message(user_chat_id, f"üì¨ –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{answer_text}")

        async with db_pool.acquire() as conn:
            result = await conn.execute(
                """
                UPDATE questions SET status = 'answered' WHERE id = $1
                """,
                question_id
            )
        await message.answer("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ‚úÖ")
    except Exception as e:
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.\n{e}")

    await state.clear()


async def main():
    # create_db()
    await init_db()

    bot = Bot(TOKEN)
    await bot.delete_webhook(drop_pending_updates=True)
    # dp.include_routers(
    #    home.router
    # )
    asyncio.create_task(send_training_reminders(bot))
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
